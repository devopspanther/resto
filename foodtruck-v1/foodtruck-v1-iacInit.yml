---
# Foodtruck v1
# :: Spin up Terraform IaC (VPC and its resources, EKS, EFS)
# :: Tags: [terraform]

- name: (SET UP THE FOODTRUCK) Bring up the EKS cluster
  hosts: localhost
  connection: local
  tags:
    - terraform
  pre_tasks: # Using Pre Tasks to perform some additional templating, setting apart projects FoodTruck and Showroom
    - name: Template changes for Foodtruck
      block:
        - name: EIPs (us-east-1)
          block:
            - name: Get list of unused EIPs (us-east-1)
              ansible.builtin.shell: >
                aws ec2 describe-addresses --region {{ ansible_env.AWS_REGION }} --filters "Name"="allocation-id","Values"="{{ item }}" | grep AssociationId
              register: usEast1UnusedEIPs
              ignore_errors: true
              loop:
                - eipalloc-024518b2b257484af
                - eipalloc-0718351c6d44556f9
                - eipalloc-0c94f4d5857966368
                - eipalloc-0a1a8051aab5b4fa4
                - eipalloc-03e1597ba763802d9
            - name: Init EIPs variable (us-east-1)
              ansible.builtin.set_fact:
                usEast1EIPs: ""
            - name: Register unused EIPs for later use (us-east-1)
              ansible.builtin.set_fact:
                usEast1EIPs: ["{{ item.item }}", "{{ usEast1EIPs }}"]
              when: item.rc == 1
              loop: "{{ usEast1UnusedEIPs.results }}"
          when:
            - ansible_env.AWS_REGION == "us-east-1"
        - name: EIPs (us-west-1)
          block:
            - name: Get list of unused EIPs (us-west-1)
              ansible.builtin.shell: >
                aws ec2 describe-addresses --region {{ ansible_env.AWS_REGION }} --filters "Name"="allocation-id","Values"="{{ item }}" | grep AssociationId
              register: usWest1UnusedEIPs
              ignore_errors: true
              loop:
                - eipalloc-48d87f46
                - eipalloc-74bd1a7a
                - eipalloc-34b3143a
                - eipalloc-51882f5f
                - eipalloc-8a882f84
            - name: Init EIPs variable (us-west-1)
              ansible.builtin.set_fact:
                usWest1EIPs: ""
            - name: Register unused EIPs for later use (us-west-1)
              ansible.builtin.set_fact:
                usWest1EIPs: ["{{ item.item }}", "{{ usWest1EIPs }}"]
              when: item.rc == 1
              loop: "{{ usWest1UnusedEIPs.results }}"
          when:
            - ansible_env.AWS_REGION == "us-west-1"
        - name: Update our VPC .tf script for a Production VPC (us-east-1)
          ansible.builtin.blockinfile:
            path: ./terraform/vpc.tf
            insertafter: "^.*enable_dns_hostnames.*$"
            block: |
              reuse_nat_ips        = true
              external_nat_ip_ids  = ["eipalloc-0c63a32c96985a10f"]
              cidr                 = "10.100.0.0/16"
              private_subnets      = ["10.100.32.0/20", "10.100.48.0/20"]
              public_subnets       = ["10.100.10.0/24", "10.100.20.0/24"]
          when:
            - ansible_env.TF_VAR_prefix_user == "production"
            - ansible_env.AWS_REGION == "us-east-1"
        - name: Update our VPC .tf script for a Staging VPC (us-east-1)
          ansible.builtin.blockinfile:
            path: ./terraform/vpc.tf
            insertafter: "^.*enable_dns_hostnames.*$"
            block: |
              reuse_nat_ips        = true
              external_nat_ip_ids  = ["eipalloc-0f76e7ef7bf8b2094"]
              cidr                 = "10.110.0.0/16"
              private_subnets      = ["10.110.32.0/20", "10.110.48.0/20"]
              public_subnets       = ["10.110.10.0/24", "10.110.20.0/24"]
          when:
            - ansible_env.TF_VAR_prefix_user == "staging"
            - ansible_env.AWS_REGION == "us-east-1"
        - name: Update our VPC .tf script for a User Dev VPC (us-east-1)
          ansible.builtin.blockinfile:
            path: ./terraform/vpc.tf
            insertafter: "^.*enable_dns_hostnames.*$"
            block: |
              reuse_nat_ips        = true
              external_nat_ip_ids  = {{ usEast1EIPs | flatten | to_json }}
              cidr                 = "10.120.0.0/16"
              private_subnets      = ["10.120.32.0/20", "10.120.48.0/20"]
              public_subnets       = ["10.120.10.0/24", "10.120.20.0/24"]
          when:
            - ansible_env.TF_VAR_prefix_user != "production"
            - ansible_env.TF_VAR_prefix_user != "staging"
            - ansible_env.AWS_REGION == "us-east-1"
        - name: Update our VPC .tf script for a Production VPC (us-west-1)
          ansible.builtin.blockinfile:
            path: ./terraform/vpc.tf
            insertafter: "^.*enable_dns_hostnames.*$"
            block: |
              reuse_nat_ips        = true
              external_nat_ip_ids  = ["eipalloc-4e8c2b40"]
              cidr                 = "10.100.0.0/16"
              private_subnets      = ["10.100.32.0/20", "10.100.48.0/20"]
              public_subnets       = ["10.100.10.0/24", "10.100.20.0/24"]
          when:
            - ansible_env.TF_VAR_prefix_user == "production"
            - ansible_env.AWS_REGION == "us-west-1"
        - name: Update our VPC .tf script for a Staging VPC (us-west-1)
          ansible.builtin.blockinfile:
            path: ./terraform/vpc.tf
            insertafter: "^.*enable_dns_hostnames.*$"
            block: |
              reuse_nat_ips        = true
              external_nat_ip_ids  = ["eipalloc-1f8e2911"]
              cidr                 = "10.110.0.0/16"
              private_subnets      = ["10.110.32.0/20", "10.110.48.0/20"]
              public_subnets       = ["10.110.10.0/24", "10.110.20.0/24"]
          when:
            - ansible_env.TF_VAR_prefix_user == "staging"
            - ansible_env.AWS_REGION == "us-west-1"
        - name: Update our VPC .tf script for a User Dev VPC (us-west-1)
          ansible.builtin.blockinfile:
            path: ./terraform/vpc.tf
            insertafter: "^.*enable_dns_hostnames.*$"
            block: |
              reuse_nat_ips        = true
              external_nat_ip_ids  = {{ usWest1EIPs | flatten | to_json }}
              cidr                 = "10.120.0.0/16"
              private_subnets      = ["10.120.32.0/20", "10.120.48.0/20"]
              public_subnets       = ["10.120.10.0/24", "10.120.20.0/24"]
          when:
            - ansible_env.TF_VAR_prefix_user != "production"
            - ansible_env.TF_VAR_prefix_user != "staging"
            - ansible_env.AWS_REGION == "us-west-1"
      when: ansible_env.TF_ENV == "foodtruck"
    - name: Template changes for Showroom
      block:
        - name: Update our VPC .tf script for Showroom (Terraform)
          ansible.builtin.blockinfile:
            path: ./terraform/vpc.tf
            insertafter: "^.*enable_dns_hostnames.*$"
            block: |
              reuse_nat_ips        = false
              external_nat_ip_ids  = []
              cidr                 = "10.120.0.0/16"
              private_subnets      = ["10.120.32.0/20", "10.120.48.0/20"]
              public_subnets       = ["10.120.10.0/24", "10.120.20.0/24"]
        - name: Update our EKS .tf script for Showroom EKS Cluster (Terraform)
          ansible.builtin.blockinfile:
            path: ./terraform/eks.tf
            insertafter: "^.*cluster_endpoint_private_access_cidrs.*$"
            block: |
              cluster_endpoint_public_access_cidrs  = ["0.0.0.0/0"]
              map_roles = [
                {
                  rolearn  = "arn:aws:iam::292886345537:role/dso_admins"
                  username = "system:node:{{ '{{' }}EC2PrivateDNSName{{ '}}' }}"
                  groups   = ["system:masters", "system:bootstrappers", "system:nodes"]
                },
                {
                  rolearn  = "arn:aws:iam::292886345537:role/dso_admins"
                  username = "cluster-creator"
                  groups   = ["system:masters", "system:bootstrappers", "system:nodes"]
                },
                {
                  rolearn  = "arn:aws:iam::292886345537:role/dso_developers"
                  username = "system:node:{{ '{{' }}EC2PrivateDNSName{{ '}}' }}"
                  groups   = ["system:masters", "system:bootstrappers", "system:nodes"]
                },
                {
                  rolearn  = "arn:aws:iam::292886345537:role/dso_developers"
                  username = "cluster-creator"
                  groups   = ["system:masters", "system:bootstrappers", "system:nodes"]
                },
              ]
        - name: Update our flowlog .tf script for a Showroom
          ansible.builtin.blockinfile:
            path: ./terraform/flowlog.tf
            insertafter: "^.*aws_flow_log.*$"
            block: |
              log_destination      = "arn:aws:s3:::partnerlab-security-log"
              log_destination_type = "s3"
              traffic_type         = "ALL"
              vpc_id               = module.vpc.vpc_id
      when: ansible_env.TF_ENV == "showroom"
    - name: Template changes for Red Carpet
      block:
        - name: Update our VPC .tf script for Red Carpet (Terraform)
          ansible.builtin.blockinfile:
            path: ./terraform/vpc.tf
            insertafter: "^.*enable_dns_hostnames.*$"
            block: |
              reuse_nat_ips        = false
              external_nat_ip_ids  = []
              cidr                 = "10.120.0.0/16"
              private_subnets      = ["10.120.32.0/20", "10.120.48.0/20"]
              public_subnets       = ["10.120.10.0/24", "10.120.20.0/24"]
        - name: Update our EKS .tf script for Red Carpet EKS Cluster (Terraform)
          ansible.builtin.blockinfile:
            path: ./terraform/eks.tf
            insertafter: "^.*cluster_endpoint_private_access_cidrs.*$"
            block: |
              cluster_endpoint_public_access_cidrs  = ["0.0.0.0/0"]
              map_roles = [
                {
                  rolearn  = "arn:aws:iam::859712638381:role/sales-lab-admin"
                  username = "system:node:{{ '{{' }}EC2PrivateDNSName{{ '}}' }}"
                  groups   = ["system:masters", "system:bootstrappers", "system:nodes"]
                },
                {
                  rolearn  = "arn:aws:iam::859712638381:role/sales-lab-admin"
                  username = "cluster-creator"
                  groups   = ["system:masters", "system:bootstrappers", "system:nodes"]
                },
              ]
        - name: Update our flowlog .tf script for a Red Carpet
          ansible.builtin.blockinfile:
            path: ./terraform/flowlog.tf
            insertafter: "^.*aws_flow_log.*$"
            block: |
              log_destination      = "arn:aws:s3:::redcarpet-security-log"
              log_destination_type = "s3"
              traffic_type         = "ALL"
              vpc_id               = module.vpc.vpc_id
      when: ansible_env.TF_ENV == "redcarpet"
  tasks: # Creating IaC with Terraform
    - name: Terraform init
      ansible.builtin.shell: terraform init -reconfigure
        -backend-config "bucket=$TF_BUCKET" -backend-config "key=$TF_VAR_prefix_user/foodtruck-v1.tfstate" ./terraform
    - name: Terraform plan
      ansible.builtin.shell: terraform plan ./terraform
    - name: Terraform apply (This may take a while, ~12mins)
      ansible.builtin.shell: terraform apply -auto-approve ./terraform
  post_tasks: # Some additional Helm Charts and Configurations that are needed
    - name: Get .kubeconfig
      ansible.builtin.shell: aws eks update-kubeconfig --name ${TF_VAR_prefix_user}-foodtruck-v1
    - name: Add EKS chart repo to Helm
      ansible.builtin.shell: helm repo add eks https://aws.github.io/eks-charts
    - name: Add the AWS Autoscaler repo to Helm
      ansible.builtin.shell: helm repo add autoscaler https://kubernetes.github.io/autoscaler
    - name: Update Helm repos
      ansible.builtin.shell: helm repo update
    - name: Install TargetGroupBinding CRDs
      ansible.builtin.shell: kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"
    - name: Install aws-load-balancer-controller Helm Chart
      ansible.builtin.shell: >
        helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system
        --set clusterName=${TF_VAR_prefix_user}-foodtruck-v1
        --version 1.1.6 --set image.tag=v2.1.3
    - name: Install cluster-autoscaler Helm Chart
      ansible.builtin.shell: >
        set -o pipefail && \
        helm upgrade --install cluster-autoscaler autoscaler/cluster-autoscaler -n kube-system
        --set awsRegion="${AWS_REGION}"
        --set autoDiscovery.clusterName=${TF_VAR_prefix_user}-foodtruck-v1
        --set rbac.create=true
        --set rbac.serviceAccount.name=cluster-autoscaler
        --set
        rbac.serviceAccount.annotations."eks\.amazonaws\.com/role-arn"=arn:aws:iam::$(terraform
        output aws_account_id ./terraform | sed 's/"//g'):role/cluster-autoscaler-${TF_VAR_prefix_user}-foodtruck-v1
    - name: Install SSM and Inspector
      ansible.builtin.shell: >
        kubectl apply -f ./kubernetes/security_daemonset.yaml
